# Calculer le nombre d'accidents par gravité
severity_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(severity = accidents$severity), FUN = length)
# Créer un graphique à barres pour les accidents par gravité
barplot(severity_accidents$count, names.arg = severity_accidents$severity,
xlab = "Gravité", ylab = "Nombre d'accidents",
main = "Nombre d'accidents selon la gravité")
# Extraire l'heure de la colonne date
accidents$hour <- as.numeric(format(accidents$date, "%H"))+1
# Calculer le nombre d'accidents par heure
hourly_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(hour = accidents$hour), FUN = length)
# Créer un graphique à barres pour les accidents par heure
barplot(hourly_accidents$count, names.arg = hourly_accidents$hour,
xlab = "Heure", ylab = "Nombre d'accidents",
main = "Nombre d'accidents par tranches d'heure")
# Calculer le nombre d'accidents par ville
city_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(city = accidents$ville), FUN = length)
# Trier les données par nombre d'accidents par ordre décroissant
city_accidents <- city_accidents[order(-city_accidents$count),]
# Sélectionner les 20 villes avec le plus d'accidents
top_100_cities <- head(city_accidents, 100)
# Créer un barplot du nombre d'accidents par ville
barplot(top_100_cities$count, names.arg = top_100_cities$city,
xlab = "Code postal", ylab = "Nombre d'accidents",
main = "Nombre d'accidents par ville", las = 2, cex.names = 0.8)
# Définir les groupes par tranche d'age
age_groups <- c("0-17", "18-24", "25-34", "35-44", "45-54", "55-64", "65+")
# Créer une nouvelle colonne pour les ages
accidents$age_group <- cut(accidents$age, breaks = c(0, 17, 24, 34, 44, 54, 64, Inf), labels = age_groups, right = TRUE)
# Créer un histogramme du nombre d'accidents par tranche d'âge
hist(as.numeric(accidents$age_group), breaks = seq(0.5, length(age_groups) + 0.5),
xaxt = "n", xlab = "Tranche d'âge", ylab = "Nombre d'accidents",
main = "Nombre d'accidents par tranche d'âge")
# Ajouter des étiquettes personnalisées à l'axe des x
axis(1, at = seq_along(age_groups), labels = age_groups)
# Extraire le mois de la colonne de date
accidents$month <- format(accidents$date, "%m")
# Calculer le nombre d'accidents par mois
monthly_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(month = accidents$month), FUN = length)
# Trier les données par mois
monthly_accidents <- monthly_accidents[order(monthly_accidents$month),]
# Créer un barplot du nombre d'accidents par mois
barplot(monthly_accidents$count, names.arg = c("Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"),
xlab = "Mois", ylab = "Nombre d'accidents",
main = "Nombre d'accidents par mois", las = 1, cex.names=0.6)
# Lecture des fichiers csv
accidents <- read.csv('stat_acc_V3.csv', sep = ";", header = TRUE)
habitants_regions <- read.csv('Regions.csv', sep=';')
habitants_departements <- read.csv('population-departements-france.csv')
link <- read.csv('link_region_dep.csv', sep=',')
# Importation des données du fichier arrondissement
source('arrondissement_PARIS_LYON_MARSEILLE.R')
# Traitements données id_code_insee
accidents$id_code_insee = as.integer(accidents$id_code_insee)
# Traitements données age
accidents$age = as.integer(accidents$age)
accidents$age[is.na(accidents$age)] <- as.integer(mean(accidents$age, na.rm = TRUE))
# Mettre le bon âge
accidents$age <- accidents$age - 14
# Traitements données an_nais
accidents$an_nais = as.integer(accidents$an_nais)
accidents$an_nais[is.na(accidents$an_nais)] <- as.integer(mean(accidents$an_nais, na.rm = TRUE))
accidents$an_nais = as.integer(accidents$an_nais)
# Traitements données place
accidents$place = as.integer(accidents$place)
# Remplace la valeur NULL par 0
accidents$place[is.na(accidents$place)] = 0
accidents$place = as.integer(accidents$place)
# Traitements données date
accidents$date <- as.POSIXct(accidents$date, format = "%Y-%m-%d %H:%M")
# Nouvelle colonne : troncature de id_code_insee
id_code_insee_trunc = as.integer((accidents$id_code_insee)/1000)
accidents$id_code_insee_trunc <- id_code_insee_trunc
# Nouvelle colonne : mois et année
accidents$month <- format(accidents$date, "%Y-%m")
accidents$week <- strftime(accidents$date, format = "%Y-%U")
# Remplacer les valeurs NULL par 0 au cas où
accidents[is.null(accidents)] <- 0
# Remplacement des longitudes de la ville de Paris
accidents$longitude <- ifelse(accidents$ville %in% names(longitudes_paris), longitudes_paris[accidents$ville], accidents$longitude)
# Remplacement des latitudes de la ville de Paris
accidents$latitude <- ifelse(accidents$ville %in% names(latitudes_paris), latitudes_paris[accidents$ville], accidents$latitude)
# Remplacement des longitudes des villes de Marseille
accidents$longitude <- ifelse(accidents$ville %in% names(longitudes_marseille), longitudes_marseille[accidents$ville], accidents$longitude)
# Remplacement des latitudes des villes de Marseille
accidents$latitude <- ifelse(accidents$ville %in% names(latitudes_marseille), latitudes_marseille[accidents$ville], accidents$latitude)
# Remplacement des longitudes des villes de Lyon
accidents$longitude <- ifelse(accidents$ville %in% names(longitudes_lyon), longitudes_lyon[accidents$ville], accidents$longitude)
# Remplacement des latitudes des villes de Lyon
accidents$latitude <- ifelse(accidents$ville %in% names(latitudes_lyon), latitudes_lyon[accidents$ville], accidents$latitude)
# Obtenir les niveaux uniques de la variable
levels <- unique(accidents$descr_grav)
for (i in 1:length(levels)) {
accidents$descr_grav[accidents$descr_grav == levels[i]] <- i
}
accidents$descr_grav <- as.numeric(accidents$descr_grav)
# Obtenir les niveaux uniques de la variable
levels <- unique(accidents$descr_cat_veh)
print(unique(accidents$descr_cat_veh))
for (i in 1:length(levels)) {
accidents$descr_cat_veh[accidents$descr_cat_veh == levels[i]] <- i
}
accidents$descr_cat_veh <- as.numeric(accidents$descr_cat_veh)
# Compter le nombre d'accidents par mois
monthly_accidents <- aggregate(list(accidents = accidents$date), by = list(month = accidents$month), length)
print(monthly_accidents)
# Compter le nombre d'accidents par semaine
weekly_accidents <- aggregate(list(accidents = accidents$date), by = list(week = accidents$week), length)
print(weekly_accidents)
# Calculer le nombre d'accidents par conditions atmosphériques
atmospheric_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(atmospheric = accidents$descr_athmo), FUN = length)
# Créer un graphique à barres pour les accidents par conditions atmosphériques
barplot(atmospheric_accidents$count, names.arg = atmospheric_accidents$atmospheric,
xlab = "Conditions atmosphériques", ylab = "Nombre d'accidents",
main = "Nombre d'accidents en fonction des conditions atmosphériques")
# Calculer le nombre d'accidents par description de la surface
surface_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(surface = accidents$descr_etat_surf), FUN = length)
# Créer un graphique à barres pour les accidents par description de la surface
barplot(surface_accidents$count, names.arg = surface_accidents$surface,
xlab = "Description de la surface", ylab = "Nombre d'accidents",
main = "Nombre d'accidents en fonction de la description de la surface")
# Créer une variable de facteur pour la gravité avec des étiquettes
accidents$severity <- factor(accidents$descr_grav, levels = c(1, 2, 3, 4),
labels = c("Indemne", "Tué", "Blessé hospitalisé", "Blessé léger"))
# Calculer le nombre d'accidents par gravité
severity_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(severity = accidents$severity), FUN = length)
# Créer un graphique à barres pour les accidents par gravité
barplot(severity_accidents$count, names.arg = severity_accidents$severity,
xlab = "Gravité", ylab = "Nombre d'accidents",
main = "Nombre d'accidents selon la gravité")
# Créer un graphique à barres pour les accidents par gravité
barplot(severity_accidents$count, names.arg = severity_accidents$severity,
xlab = "Gravité", ylab = "Nombre d'accidents",
main = "Nombre d'accidents selon la gravité")
# Extraire l'heure de la colonne date
accidents$hour <- as.numeric(format(accidents$date, "%H"))+1
# Calculer le nombre d'accidents par heure
hourly_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(hour = accidents$hour), FUN = length)
# Créer un graphique à barres pour les accidents par heure
barplot(hourly_accidents$count, names.arg = hourly_accidents$hour,
xlab = "Heure", ylab = "Nombre d'accidents",
main = "Nombre d'accidents par tranches d'heure")
# Calculer le nombre d'accidents par ville
city_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(city = accidents$ville), FUN = length)
# Trier les données par nombre d'accidents par ordre décroissant
city_accidents <- city_accidents[order(-city_accidents$count),]
# Sélectionner les 20 villes avec le plus d'accidents
top_100_cities <- head(city_accidents, 100)
# Créer un barplot du nombre d'accidents par ville
barplot(top_100_cities$count, names.arg = top_100_cities$city,
xlab = "Code postal", ylab = "Nombre d'accidents",
main = "Nombre d'accidents par ville", las = 2, cex.names = 0.8)
# Définir les groupes par tranche d'age
age_groups <- c("0-17", "18-24", "25-34", "35-44", "45-54", "55-64", "65+")
# Créer une nouvelle colonne pour les ages
accidents$age_group <- cut(accidents$age, breaks = c(0, 17, 24, 34, 44, 54, 64, Inf), labels = age_groups, right = TRUE)
# Créer un histogramme du nombre d'accidents par tranche d'âge
hist(as.numeric(accidents$age_group), breaks = seq(0.5, length(age_groups) + 0.5),
xaxt = "n", xlab = "Tranche d'âge", ylab = "Nombre d'accidents",
main = "Nombre d'accidents par tranche d'âge")
# Ajouter des étiquettes personnalisées à l'axe des x
axis(1, at = seq_along(age_groups), labels = age_groups)
# Extraire le mois de la colonne de date
accidents$month <- format(accidents$date, "%m")
# Calculer le nombre d'accidents par mois
monthly_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(month = accidents$month), FUN = length)
# Trier les données par mois
monthly_accidents <- monthly_accidents[order(monthly_accidents$month),]
# Créer un barplot du nombre d'accidents par mois
barplot(monthly_accidents$count, names.arg = c("Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"),
xlab = "Mois", ylab = "Nombre d'accidents",
main = "Nombre d'accidents par mois", las = 1, cex.names=0.6)
dataframe_grav_reg <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:length(accidents$id_code_insee_trunc)){
gravite = accidents$descr_grav[i]
code_dep = accidents$id_code_insee_trunc[i]
if(is.na(code_dep) == TRUE){
code_dep=as.character("2A")
}
if(code_dep == 97){
code_dep = as.integer((accidents$id_code_insee[i])/100)
}
for(j in 1:length(link$code_departement)){
code_dep_link = link$code_departement[j]
if(code_dep == code_dep_link){
indice_link = which(link$code_departement == code_dep_link)
corresp_reg = link$code_region[indice_link]
indice_reg = which(habitants_regions$CODREG == corresp_reg)
print(indice_reg)
print("a")
print(as.integer(gravite))
dataframe_grav_reg[[indice_reg]][as.integer(gravite)] = dataframe_grav_reg[[indice_reg]][as.integer(gravite)] +1
print(dataframe_grav_reg[[indice_reg]][as.integer(gravite)])
}
}
}
dataframe_grav_reg <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:length(accidents$id_code_insee_trunc)){
gravite = accidents$descr_grav[i]
code_dep = accidents$id_code_insee_trunc[i]
if(is.na(code_dep) == TRUE){
code_dep=as.character("2A")
}
if(code_dep == 97){
code_dep = as.integer((accidents$id_code_insee[i])/100)
}
for(j in 1:length(link$code_departement)){
code_dep_link = link$code_departement[j]
if(code_dep == code_dep_link){
indice_link = which(link$code_departement == code_dep_link)
corresp_reg = link$code_region[indice_link]
indice_reg = which(habitants_regions$CODREG == corresp_reg)
dataframe_grav_reg[[indice_reg]][as.integer(gravite)] = dataframe_grav_reg[[indice_reg]][as.integer(gravite)] +1
}
}
}
print(dataframe_grav_reg)
# Compter le nombre d'accidents par mois
monthly_accidents <- aggregate(list(accidents = accidents$date), by = list(month = accidents$month), length)
print(monthly_accidents)
# Compter le nombre d'accidents par semaine
weekly_accidents <- aggregate(list(accidents = accidents$date), by = list(week = accidents$week), length)
print(weekly_accidents)
# Calculer le nombre d'accidents par conditions atmosphériques
atmospheric_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(atmospheric = accidents$descr_athmo), FUN = length)
# Créer un graphique à barres pour les accidents par conditions atmosphériques
barplot(atmospheric_accidents$count, names.arg = atmospheric_accidents$atmospheric,
xlab = "Conditions atmosphériques", ylab = "Nombre d'accidents",
main = "Nombre d'accidents en fonction des conditions atmosphériques")
# Calculer le nombre d'accidents par description de la surface
surface_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(surface = accidents$descr_etat_surf), FUN = length)
# Créer un graphique à barres pour les accidents par description de la surface
barplot(surface_accidents$count, names.arg = surface_accidents$surface,
xlab = "Description de la surface", ylab = "Nombre d'accidents",
main = "Nombre d'accidents en fonction de la description de la surface")
# Créer une variable de facteur pour la gravité avec des étiquettes
accidents$severity <- factor(accidents$descr_grav, levels = c(1, 2, 3, 4),
labels = c("Indemne", "Tué", "Blessé hospitalisé", "Blessé léger"))
# Calculer le nombre d'accidents par gravité
severity_accidents <- aggregate(list(count = accidents$Num_Acc), by = list(severity = accidents$severity), FUN = length)
print(habitants_regions)
df <- data.frame(matrix(1:68, nrow = 4, ncol = 17))
# Parcourir le dataframe avec une double boucle for
for (i in 1:nrow(df)) {
for (j in 1:ncol(df)) {
# Obtenir la valeur à l'indice (i, j)
valeur <- df[i, j]
# Afficher la valeur
print(valeur)
}
}
print(df)
df <- data.frame(matrix(1:68, nrow = 4, ncol = 17))
# Parcourir le dataframe avec une double boucle for
for (i in 1:ncol(df)) {
for (j in 1:nrow(df)) {
# Obtenir la valeur à l'indice (i, j)
valeur <- df[i, j]
# Afficher la valeur
print(valeur)
}
}
print(df)
df <- data.frame(matrix(1:68, nrow = 4, ncol = 17))
# Parcourir le dataframe avec une double boucle for
for (i in 1:ncol(df)) {
for (j in 1:nrow(df)) {
# Obtenir la valeur à l'indice (i, j)
valeur <- df[j, i]
# Afficher la valeur
print(valeur)
}
}
print(df)
dataframe_grav_reg_centmille <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:ncol(dataframe_grav_reg)){
for(j in 1:nrow(dataframe_grav_reg)){
dataframe_grav_reg_centmille[[j]][i] = (((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[j])
}
}
dataframe_grav_reg_centmille <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:ncol(dataframe_grav_reg)){
for(j in 1:nrow(dataframe_grav_reg)){
dataframe_grav_reg_centmille[[j]][i] = as.integer((((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[j]))
}
}
dataframe_grav_reg_centmille <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:ncol(dataframe_grav_reg)){
for(j in 1:nrow(dataframe_grav_reg)){
print(dataframe_grav_reg_centmille[[j]][i])
print(as.integer((dataframe_grav_reg[[j]][i])*100000))
print("a")
dataframe_grav_reg_centmille[[j]][i] = as.integer((((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[j]))
}
}
dataframe_grav_reg_centmille <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:ncol(dataframe_grav_reg)){
for(j in 1:nrow(dataframe_grav_reg)){
print(dataframe_grav_reg_centmille[[j]][i])
print(as.integer((dataframe_grav_reg[[j]][i])*100000))
print("a")
dataframe_grav_reg_centmille[[j]][i] = as.integer((((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[i]))
}
}
dataframe_grav_reg_centmille <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:ncol(dataframe_grav_reg)){
for(j in 1:nrow(dataframe_grav_reg)){
print(dataframe_grav_reg_centmille[[j]][i])
print(as.integer((((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[i])))
print("a")
dataframe_grav_reg_centmille[[j]][i] = as.integer((((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[i]))
}
}
for(i in 1:ncol(dataframe_grav_reg)){
for(j in 1:nrow(dataframe_grav_reg)){
print(dataframe_grav_reg_centmille[[j]][i])
print(as.integer((((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[i])))
print(i)
print(j)
print("a")
dataframe_grav_reg_centmille[[j]][i] = as.integer((((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[i]))
}
}
dataframe_grav_reg <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:length(accidents$id_code_insee_trunc)){
gravite = accidents$descr_grav[i]
code_dep = accidents$id_code_insee_trunc[i]
if(is.na(code_dep) == TRUE){
code_dep=as.character("2A")
}
if(code_dep == 97){
code_dep = as.integer((accidents$id_code_insee[i])/100)
}
for(j in 1:length(link$code_departement)){
code_dep_link = link$code_departement[j]
if(code_dep == code_dep_link){
indice_link = which(link$code_departement == code_dep_link)
corresp_reg = link$code_region[indice_link]
indice_reg = which(habitants_regions$CODREG == corresp_reg)
dataframe_grav_reg[[indice_reg]][as.integer(gravite)] = dataframe_grav_reg[[indice_reg]][as.integer(gravite)] +1
}
}
}
print(dataframe_grav_dep)
print(dataframe_grav_reg)
dataframe_grav_reg_centmille <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:ncol(dataframe_grav_reg)){
for(j in 1:nrow(dataframe_grav_reg)){
print(dataframe_grav_reg_centmille[[j]][i])
print(as.integer((((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[i])))
print(i)
print(j)
print("a")
dataframe_grav_reg_centmille[[j]][i] = as.integer((((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[i]))
}
}
print(habitants_regions$PTOT[5])
print(dataframe_grav_reg[[1]][5])
print(dataframe_grav_reg[[5]][1])
print(dataframe_grav_reg)
print(dataframe_grav_reg_centmille[[5]][1])
dataframe_grav_reg_centmille <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:ncol(dataframe_grav_reg)){
for(j in 1:nrow(dataframe_grav_reg)){
print(dataframe_grav_reg_centmille[[i]][j])
print(as.integer((((dataframe_grav_reg[[i]][j])*100000)/habitants_regions$PTOT[i])))
print(i)
print(j)
print("a")
dataframe_grav_reg_centmille[[j]][i] = as.integer((((dataframe_grav_reg[[j]][i])*100000)/habitants_regions$PTOT[i]))
}
}
dataframe_grav_reg_centmille <- data.frame(matrix(0, nrow = 4, ncol = length(habitants_regions$CODREG)))
for(i in 1:ncol(dataframe_grav_reg)){
for(j in 1:nrow(dataframe_grav_reg)){
print(dataframe_grav_reg_centmille[[i]][j])
print(as.integer((((dataframe_grav_reg[[i]][j])*100000)/habitants_regions$PTOT[i])))
print(i)
print(j)
print("a")
dataframe_grav_reg_centmille[[i]][j] = as.integer((((dataframe_grav_reg[[i]][j])*100000)/habitants_regions$PTOT[i]))
}
}
print(dataframe_grav_reg_centmille)
print(dataframe_grav_reg)
print(accidents)
print(weekly_accidents)
modele_accident_semaine <- lm(weekly_accidents$accidents ~ weekly_accidents$week)
summary(modele_accident_semaine)
print(eekly_accidents$accidents)
print(weekly_accidents$accidents)
print(weekly_accidents$week)
print(accidents$week)
print(accidents$date[211])
print(accidents$date[8])
for (i in 1:length(accidents$week)){}
for (i in 1:length(accidents$week)){
if(accidents$week[i] == "2009-53"){
indice_test = which(accidents$week[i])
}
}
for (i in 1:length(accidents$week)){
if(accidents$week[i] == "2009-53"){
indice_test = which(accidents$week[i])
print(indice_test)
}
}
for (i in 1:length(accidents$week)){
if(accidents$week[i] == "2009-52"){
indice_test = which(accidents$week[i])
print(indice_test)
}
}
for (i in 1:length(accidents$week)){
if(accidents$week[i] == "2009-52"){
indice_test = which(accidents$week[i] == "2009-52")
print(indice_test)
}
}
for (i in 1:length(accidents$week)){
if(accidents$week[i] == "2009-52"){
indice_test = which(accidents$week[i] == "2009-52")
print(indice_test)
}
}
print(accidents$week)
modele_accident_semaine <- lm(weekly_accidents$accidents ~ weekly_accidents$week)
week_year <- seq(1, 53)
print(week_year)
modele_accident_semaine <- lm(weekly_accidents$accidents ~ week_year)
summary(modele_accident_semaine)
plot(modele_accident_semaine)
month_year <- seq(1, 12)
# Régression linéaire entre les accidents et les mois
month_year <- seq(1, 12)
modele_accident_mois <- lm(monthly_accidents$accidents ~ month_year)
summary(modele_accident_mois)
plot(modele_accident_mois)
anova(modele_accident_mois)
anova(modele_accident_semaine)
# Régression linéaire entre les accidents et les semaines
week_year <- seq(1, 53)
weekly_accidents_reglin <- rep(0, time = length(weekly_accidents$accidents))
for (i in 2:length(weekly_accidents$accidents)){
weekly_accidents_reglin[i] <- weekly_accidents_reglin[i-1] + weekly_accidents_reglin[i]
}
print(weekly_accidents_reglin)
print(weekly_accidents)
weekly_accidents_reglin <- rep(0, time = length(weekly_accidents$accidents))
for (i in 2:length(weekly_accidents$accidents)){
weekly_accidents_reglin[i] <- weekly_accidents$accidents[i-1] + weekly_accidents$accidents[i]
}
print(weekly_accidents_reglin)
weekly_accidents_reglin <- rep(0, time = length(weekly_accidents$accidents))
weekly_accidents_reglin[1] <- weekly_accidents$accidents[1]
for (i in 1:length(weekly_accidents$accidents)){
weekly_accidents_reglin[i] <- weekly_accidents$accidents[i-1] + weekly_accidents$accidents[i]
}
weekly_accidents_reglin <- rep(0, time = length(weekly_accidents$accidents))
weekly_accidents_reglin[1] <- weekly_accidents$accidents[1]
for (i in 2:length(weekly_accidents$accidents)){
weekly_accidents_reglin[i] <- weekly_accidents$accidents[i-1] + weekly_accidents$accidents[i]
}
print(weekly_accidents_reglin)
weekly_accidents_reglin <- cumsum(weekly_accidents$accidents)
print(weekly_accidents_reglin)
# Régression linéaire entre les accidents et les semaines
week_year <- seq(1, 53)
weekly_accidents_reglin <- cumsum(weekly_accidents$accidents)
modele_accident_semaine <- lm(weekly_accidents$accidents ~ week_year)
monthly_accidents_reglin <- cumsum(monthly_accidents$accidents)
# Régression linéaire entre les accidents et les semaines
week_year <- seq(1, 53)
# Calculer la somme ajouter des accidents par semaine
weekly_accidents_reglin <- cumsum(weekly_accidents$accidents)
modele_accident_semaine <- lm(weekly_accidents_reglin ~ week_year)
summary(modele_accident_semaine)
anova(modele_accident_semaine)
plot(modele_accident_semaine)
plot(modele_accident_semaine)
# Régression linéaire entre les accidents et les mois
month_year <- seq(1, 12)
# Calculer la somme ajouter des accidents par mois
monthly_accidents_reglin <- cumsum(monthly_accidents$accidents)
modele_accident_mois <- lm(monthly_accidents_reglin ~ month_year)
summary(modele_accident_mois)
anova(modele_accident_mois)
plot(modele_accident_semaine)
plot(modele_accident_mois)
anova(modele_accident_mois)
anova(modele_accident_semaine)
summary(modele_accident_mois)
summary(modele_accident_semaine)
test2 <- summary(modele_accident_semaine)
print(test2$r.squared)
test2 <- summary(modele_accident_mois)
print(test2$r.squared)
test2 <- summary(modele_accident_semaine)
print(rmse <- sqrt((test2$sigma)^2))
test2 <- summary(modele_accident_mois)
print(rmse <- sqrt((test2$sigma)^2))
testinter <- confint(modele_accident_mois)
print(testinter)
print(modele_accident_mois)
test2 <- summary(modele_accident_semaine)
print(test2$r.squared)
testinter <- confint(test2)
print(testinter)
testinter <- confint(modele_accident_semaine)
print(testinter)
print(modele_accident_semaine)
test3 <- coef(modele_accident_mois)
print(test3)
